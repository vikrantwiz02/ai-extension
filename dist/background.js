const u={apiKey:"",backendUrl:"http://localhost:3002/analyze",jpegQuality:95,provider:"groq",model:"llava-v1.5-7b-4096-preview",ollamaBaseUrl:"http://localhost:11434"};chrome.runtime.onMessage.addListener((t,e,o)=>{var s;if(t.type==="CAPTURE_SCREENSHOT"){if(!((s=e.tab)!=null&&s.id)){o({type:"SCREENSHOT_RESULT",success:!1,error:"Invalid tab context"});return}return m(e.tab.id).then(r=>{try{o(r)}catch(a){console.error("Failed to send response (context may be invalidated):",a)}}).catch(r=>{console.error("Error handling screenshot:",r);try{o({type:"SCREENSHOT_RESULT",success:!1,error:r.message||"Unknown error occurred"})}catch(a){console.error("Failed to send error response:",a)}}),!0}});async function m(t){if(!t)throw new Error("No active tab found");try{const e=await w();if(!e.backendUrl)throw new Error("Please configure backend URL in extension options");if(["groq","huggingface","replicate","perplexity","mistral","gemini","openai","claude"].includes(e.provider)&&!e.apiKey)throw new Error(`Please configure API key for ${e.provider} in extension options`);const r=(await chrome.tabs.query({active:!0,currentWindow:!0}))[0];if(!r||!r.id)throw new Error("No active tab found");const i={image:(await new Promise((h,d)=>{chrome.tabs.captureVisibleTab(r.windowId,{format:"png"},p=>{chrome.runtime.lastError?d(new Error(chrome.runtime.lastError.message)):p?h(p):d(new Error("Screenshot capture returned empty result"))})})).split(",")[1],format:"png",provider:e.provider,model:e.model};e.provider==="ollama"&&(i.baseUrl=e.ollamaBaseUrl);const c={"Content-Type":"application/json"};e.apiKey&&(c.Authorization=`Bearer ${e.apiKey}`);const n=await fetch(e.backendUrl,{method:"POST",headers:c,body:JSON.stringify(i)});if(!n.ok)throw new Error(`Backend request failed: ${n.status} ${n.statusText}`);const l=await n.json();if(!l.answer)throw new Error("Invalid response format: missing answer field");return{type:"SCREENSHOT_RESULT",success:!0,answer:l.answer}}catch(e){throw console.error("Screenshot capture error:",e),e}}async function w(){return new Promise(t=>{chrome.storage.sync.get(u,e=>{t(e)})})}chrome.runtime.onInstalled.addListener(t=>{t.reason==="install"&&(chrome.storage.sync.set(u),chrome.runtime.openOptionsPage())});
